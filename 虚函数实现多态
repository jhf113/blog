# 虚函数实现多态
为了实现C++多态，C++使用了一种动态的绑定技术。这个技术的核心是虚函数列表。
## 类的虚表
每一个虚函数的类都会有一个虚表如何一个类B继承一个类A，如果A中有虚函数，那么B也可以调用这些虚函数，一个类继承了包含虚函数的基类，那么这个类也有自己的虚表。
![Alt text](https://wx4.sinaimg.cn/mw2000/008peUCply1h0z4s59busj30oz0dq75h.jpg)
虚表是一个指针数组，元素时虚函数的指针，每一个虚表的元素是虚函数的指针指向一个虚函数，并且在虚表中没用普通函数的指针，虚表在编译的时候就构造出来了。
## 虚表指针
每一个类有一个虚表，并且虚表是属于类的，每个类的对象都使用这一个虚表，为了让对象指向这个虚表，在对象的内部包含了一个指向虚表的指针，为了让对象都有这个虚表指针，编译器在类中添加了这个指针*__vptr，用来指向虚表，这样在类的对象被创建的时候都拥有这个指针，并且这个指针会自动指向这个虚表。
![Alt text](https://wx3.sinaimg.cn/mw2000/008peUCply1h0z4sbq839j30rz0hsdho.jpg)
```
class A{
public:
    virtual void vfuncl () ;
    virtual void vfunc2 () ;
    void func1 ();
    void func2();
    int m_datal, m_data2 ;
};
class B : public A {
public:
    virtual void vfuncl ();
    void func1();
private:
     int m_dlata3;
};
class c: public B{
public:
    virtual void vfunc2 () ;
    void func2 () ;
private:
    int m_data1,m_data4;
};
```
![Alt text](https://wx1.sinaimg.cn/mw2000/008peUCply1h0z4sg2fmbj30tu0mvgpl.jpg)
这三个类中都存在虚函数，编译器为每个类都创造了一个虚表，并且每个类的对象都有一个虚表指针去指向这个虚表，A类中存在两个虚函数A::vfunc1()和A::vfunc2(),所以在虚表中指向了这两个函数，B继承A类，因为B重写了虚函数B::vfunc1()，所以B的虚函数列表分别指向B::vfunc1(),A::vfunc2(),因为C继承B，并且C重写虚函数C::vfunc2(),所以C的虚函数列表分别指向B::vfunc1(),C::vfunc2().
多态实现
```
int main()
{
    B bobject;
    A *p=&bobject;
    p->vfunc1();
}
```
1. 我们首先声明一个基类的指针p来指向子类的对象，虽然p是基类的指针只能指向基类，但是虚表指针也是基类的一部分，所以p可以访问到子类的虚表指针，让后可以访问到子类的虚表
2. 在虚表中查找所要调用函数对应的位置，由于虚表在编译的时候就构造出来了，所以可以根据所调用的函数去定位到虚表中的对应位置，p->vfunc1()的调用，在B中的虚表的第一个位置。
3. 最后根据虚表中找到的虚表指针去调用函数，在虚表中可以看出了，p->vfunc1(),调用的是B::vfunc1().

我们把经过通过调用虚函数的过程称为动态绑定，其表现出来的现象为运行时多态，动态绑定区别于传统的函数调用，传统的函数调用为静态绑定，即函数的调用在编译阶段就可以确定下来。
执行函数的动态绑定需要具备三种条件：
1. 通过指针来调用函数
2. 指针向上转型（子类转成基类)//父类指针指向子类对象
3. 调用的是虚函数
