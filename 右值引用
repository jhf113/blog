# 右值引用
1. 右值引用就是对右值引用的类型，因为右值是匿名的，所以我们只能通过引用的方式找到他。无论是左值引用还是右值引用必须被初始化，因为引用本身并不拥有所绑定对象的内存，只是该对象的一个别名，通过右值引用， 该右值所占用的内存有可以被使用。

  ``` 
int &&value=10//右值引用，10是字面量，是右值
class Test
{
public:
 Test()
 {
 cout<<"构造函数"<<endl;
 }
 Test(const Test &a)
 {
 cout<<"拷贝构造函数"<<endl;
 }
};
Test getObj()
{
 return Test();
}
int main()
{
 int a1;
 //int &&a2=a1; //报错右值引用不能被左值初始化
 //Test &t1=getObj();//右值不能初始化左值
 Test &&t2=getObj();//函数返回的临时对象是右值，可以被引用
 const Test &t3=getObj();//常量左值引用是万能可以接受左值，右值，常量左值，常量右值
 const int &t3=a1;//可以被左值初始化
 return 0;
}
```
2. 右值引用的用处
在C++用对象初始化对象时，会调用拷贝构造函数，如果这个对象占用的堆内存很大，那么这个拷贝的代价就是非常大的，在某些情况下，如果想要避免深拷贝，就可以使用右值引用进性能的优化。
```
class Test
{
public:
 Test():m_num(new int(100))
 {
 cout<<"构造函数"<<endl;
 }
 Test(const Test &a):m_num(new int(*a.m_num))
 {
 cout<<"拷贝构造函数"<<endl;
 }
 ~Test()
 {
 delete m_num;
 }
 int m_num;
};
Test getObj()
{
 Test t;
 return t;
}
int main()
{
 Test t=getObj();
 cout<<"m_num:"<<*t.m_num<<endl;
 return 0;
}
```
这段代码在调用Test t=getObj()；的时候调用了拷贝构造函数，对返回的临时对象进行了深拷贝得到了对象t，在getObj函数中创建了对象虽然进行了内存申请操作，但是没有使用就被释放掉了，如果我们在函数结束后仍然可以利用在函数里面申请的空间就极大的节省了创建对象和释放对象的时间，这个操作我们就需要我们的右值引用来完成
右值应有具有移动语义，移动语义可以将堆区资源，通过浅拷贝从一个对象转移到另一个对象这样就能减少不必要的临时对象的创建，拷贝以及销毁，大幅度提高性能
```
class Test
{
public:
 Test():m_num(new int(100))
 {
 cout<<"构造函数"<<endl;
 }
 Test(const Test &a):m_num(new int(*a.m_num))
 {
 cout<<"拷贝构造函数"<<endl;
 }
 Test(Test &&a):m_num(a.m_num)
 {
 a.m_num=nullptr;
 cout<<"移动构造函数"<<endl;
 }
 ~Test()
 {
 delete m_num;
 }
 int m_num;
};
Test getObj()
{
 Test t;
 return t;
}
int main()
{
 Test t=getObj();
 cout<<"m_num:"<<*t.m_num<<endl;
 return 0;
}
```
+ 在上面的代码中添加了移动拷贝构造函数（参数为右值引用类型），这样在进行Test t=getObj()并没有调用拷贝构造函数进行深拷贝，而是调用（浅拷贝）移动构造，提高性能
+ 在本例中，getObj（）返回值就是一个右值，在进行赋值操作时候如果等号 右边是一个右值，那么就会进行移动构造函数调用
结论：需要动态申请的大量的资源的类，应该设计移动构造，提高程序效率，需要注意的是提供移动构造的同时，一般也会提供左值引用拷贝构造函数，左值初始化新对象时会走拷贝构造。
